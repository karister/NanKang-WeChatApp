{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["var _fs\r\ntry {\r\n  _fs = require('graceful-fs')\r\n} catch (_) {\r\n  _fs = require('fs')\r\n}\r\n\r\nfunction readFile (file, options, callback) {\r\n  if (callback == null) {\r\n    callback = options\r\n    options = {}\r\n  }\r\n\r\n  if (typeof options === 'string') {\r\n    options = {encoding: options}\r\n  }\r\n\r\n  options = options || {}\r\n  var fs = options.fs || _fs\r\n\r\n  var shouldThrow = true\r\n  if ('throws' in options) {\r\n    shouldThrow = options.throws\r\n  }\r\n\r\n  fs.readFile(file, options, function (err, data) {\r\n    if (err) return callback(err)\r\n\r\n    data = stripBom(data)\r\n\r\n    var obj\r\n    try {\r\n      obj = JSON.parse(data, options ? options.reviver : null)\r\n    } catch (err2) {\r\n      if (shouldThrow) {\r\n        err2.message = file + ': ' + err2.message\r\n        return callback(err2)\r\n      } else {\r\n        return callback(null, null)\r\n      }\r\n    }\r\n\r\n    callback(null, obj)\r\n  })\r\n}\r\n\r\nfunction readFileSync (file, options) {\r\n  options = options || {}\r\n  if (typeof options === 'string') {\r\n    options = {encoding: options}\r\n  }\r\n\r\n  var fs = options.fs || _fs\r\n\r\n  var shouldThrow = true\r\n  if ('throws' in options) {\r\n    shouldThrow = options.throws\r\n  }\r\n\r\n  try {\r\n    var content = fs.readFileSync(file, options)\r\n    content = stripBom(content)\r\n    return JSON.parse(content, options.reviver)\r\n  } catch (err) {\r\n    if (shouldThrow) {\r\n      err.message = file + ': ' + err.message\r\n      throw err\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nfunction stringify (obj, options) {\r\n  var spaces\r\n  var EOL = '\\n'\r\n  if (typeof options === 'object' && options !== null) {\r\n    if (options.spaces) {\r\n      spaces = options.spaces\r\n    }\r\n    if (options.EOL) {\r\n      EOL = options.EOL\r\n    }\r\n  }\r\n\r\n  var str = JSON.stringify(obj, options ? options.replacer : null, spaces)\r\n\r\n  return str.replace(/\\n/g, EOL) + EOL\r\n}\r\n\r\nfunction writeFile (file, obj, options, callback) {\r\n  if (callback == null) {\r\n    callback = options\r\n    options = {}\r\n  }\r\n  options = options || {}\r\n  var fs = options.fs || _fs\r\n\r\n  var str = ''\r\n  try {\r\n    str = stringify(obj, options)\r\n  } catch (err) {\r\n    // Need to return whether a callback was passed or not\r\n    if (callback) callback(err, null)\r\n    return\r\n  }\r\n\r\n  fs.writeFile(file, str, options, callback)\r\n}\r\n\r\nfunction writeFileSync (file, obj, options) {\r\n  options = options || {}\r\n  var fs = options.fs || _fs\r\n\r\n  var str = stringify(obj, options)\r\n  // not sure if fs.writeFileSync returns anything, but just in case\r\n  return fs.writeFileSync(file, str, options)\r\n}\r\n\r\nfunction stripBom (content) {\r\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\r\n  if (Buffer.isBuffer(content)) content = content.toString('utf8')\r\n  content = content.replace(/^\\uFEFF/, '')\r\n  return content\r\n}\r\n\r\nvar jsonfile = {\r\n  readFile: readFile,\r\n  readFileSync: readFileSync,\r\n  writeFile: writeFile,\r\n  writeFileSync: writeFileSync\r\n}\r\n\r\nmodule.exports = jsonfile\r\n"]}